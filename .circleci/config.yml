version: 2

jobs:
  build:
    docker:
      - image: qrntz/tklc:circleci
    working_directory: ~/product
    environment:
    steps:
      - checkout
      - setup_remote_docker
      - run: |
          echo "export AUTHDATA=\"$( aws ecr get-authorization-token --query 'authorizationData[0]' )\"" >> $BASH_ENV
          echo "export REPO=\"$( jq -r '.proxyEndpoint' <<< \"$AUTHDATA\" | sed 's|^https://||' )\"" >> $BASH_ENV
          jq -r '.meta.build_args | to_entries | ((map("--build-arg=\(.key)=\(.value)") | join(" ") as $x | "export BUILD_ARGS=\"\($x)\""), (.[] | "export \(.key)=\"\(.value)\""))' manifest.json >> $BASH_ENV
      - run: |
          set -x
          echo "$AUTHDATA"
          jq -r '.authorizationToken' <<< "$AUTHDATA"
          jq -r '.authorizationToken' <<< "$AUTHDATA" | base64 -d | cut -d: -f2 | docker login -u AWS --password-stdin "$REPO"
          mkdir -p build
          docker pull "$REPO/keyhole-builder:master"
          if [[ -n $BASE_IMAGE ]]; then docker pull "$REPO/$BASE_IMAGE"; fi
          if [[ -d overlay ]]; then cp -r overlay build/overlay; else mkdir -p build/overlay; fi
          mkdir -p build/overlay/usr/share/tklc/conf
          cp /usr/share/tklc/conf/* build/overlay/usr/share/tklc/conf/
          tar czf - . | docker run --name keyhole -i "$REPO/keyhole-builder:master"
          mkdir -p build/overlay/usr/local/sbin
          docker cp keyhole:/go/src/keyhole/keyhole ./build/overlay/usr/local/sbin/keyhole
          cat /usr/share/tklc/skel/Dockerfile.head Dockerfile.tail > ./build/Dockerfile
          docker build -t "$REPO/$PRODUCT_NAME:$PRODUCT_VERSION" $BUILD_ARGS build
          docker push "$REPO/$PRODUCT_NAME:$PRODUCT_VERSION"

workflows:
  version: 2
  workflow:
    jobs:
      - build:
          context: "awsecr"
